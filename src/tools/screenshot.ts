/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */

import { FunctionDeclaration, Type } from "@google/genai";
import html2canvas from 'html2canvas';
import { ToolError } from '../types';

export const captureCodeOutputScreenshotDeclaration: FunctionDeclaration = {
  name: 'captureCodeOutputScreenshot',
  description: 'Takes a screenshot of the visual output generated by the `executeCode` tool. This allows you to "see" and analyze plots, tables, and other HTML-based results.',
  parameters: {
    type: Type.OBJECT,
    properties: {
      outputId: {
        type: Type.STRING,
        description: 'The unique ID of the code output component to capture. This ID is provided in the result of an `executeCode` call that generated a visual output.',
      },
    },
    required: ['outputId'],
  },
};

export const executeCaptureCodeOutputScreenshot = async (args: { outputId: string }): Promise<string> => {
  const { outputId } = args;
  if (!outputId) {
    throw new ToolError('captureCodeOutputScreenshot', 'MISSING_ARGUMENT', 'The outputId parameter is required.');
  }

  // The element to capture is the container of the iframe, not the iframe itself.
  const elementToCapture = document.getElementById(outputId);

  if (!elementToCapture) {
    throw new ToolError('captureCodeOutputScreenshot', 'ELEMENT_NOT_FOUND', `Could not find an element with the ID "${outputId}" to capture.`);
  }

  try {
    // Yield to the event loop, allowing the UI to update with a loading state
    // before we start the blocking html2canvas operation.
    await new Promise(resolve => setTimeout(resolve, 50));

    const canvas = await html2canvas(elementToCapture, {
      allowTaint: true,
      useCORS: true,
      backgroundColor: window.getComputedStyle(document.body).backgroundColor, // Match the theme
    });
    
    // Return the raw base64 data, stripping the data URL prefix.
    const base64Image = canvas.toDataURL('image/png').split(',')[1];
    
    if (!base64Image) {
        throw new Error('Failed to generate base64 data from canvas.');
    }

    return base64Image;

  } catch (error) {
    const originalError = error instanceof Error ? error : new Error(String(error));
    console.error(`Screenshot tool failed for ID "${outputId}":`, originalError);
    throw new ToolError('captureCodeOutputScreenshot', 'CAPTURE_FAILED', originalError.message, originalError);
  }
};